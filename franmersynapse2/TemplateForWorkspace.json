{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "franmersynapse2"
		},
		"AzureDatabricks_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks'"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'"
		},
		"SQLPoolIngestion_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLPoolIngestion'"
		},
		"TheVaultGen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'TheVaultGen2'"
		},
		"franmersynapse2-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'franmersynapse2-WorkspaceDefaultSqlServer'"
		},
		"AzureDataLakeStorage_Aeffacer_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://demofranmer.dfs.core.windows.net"
		},
		"AzureKeyVault_Trust_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://Trust.vault.azure.net/"
		},
		"TheVaultGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://thevaultgen2.dfs.core.windows.net"
		},
		"Wikipedia_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dumps.wikimedia.org/other/pageviews/"
		},
		"franmersynapse2-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://thevaultgen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/01_Parquet2HeapTable')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Pipeline to copy logs from parquet file into heap table in Azure Synapse Pool",
				"activities": [
					{
						"name": "Copy parquet to table",
						"description": "Activity to Copy logs from parquet file into heap table in Azure Synapse Pool",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Visitors_Tracking_ID",
											"type": "String"
										},
										"sink": {
											"name": "Visitors_Tracking_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Visitors_DE_Country_Name",
											"type": "String"
										},
										"sink": {
											"name": "Visitors_DE_Country_Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Visitors_DE_City",
											"type": "String"
										},
										"sink": {
											"name": "Visitors_DE_City",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Client_ID",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Client_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Device_Segment",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Device_Segment",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Full_Device_Name",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Full_Device_Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Model",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Model",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_OS",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_OS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Browser_Type",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Browser_Type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Browser",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Browser",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Session_Number",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Session_Number",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Hour",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Hour",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Session_Duration_Export",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Session_Duration_Export",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Traffic_Source",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Traffic_Source",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Referrer_Host",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Referrer_Host",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Sessions_Search_Phrase",
											"type": "String"
										},
										"sink": {
											"name": "Sessions_Search_Phrase",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PageViews_Campaign_PV",
											"type": "String"
										},
										"sink": {
											"name": "PageViews_Campaign_PV",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PageViews_Page_Country_Name",
											"type": "String"
										},
										"sink": {
											"name": "PageViews_Page_Country_Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PageViews_Page_Language",
											"type": "String"
										},
										"sink": {
											"name": "PageViews_Page_Language",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PageViews_Page",
											"type": "String"
										},
										"sink": {
											"name": "PageViews_Page",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PageViews_Animation",
											"type": "String"
										},
										"sink": {
											"name": "PageViews_Animation",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PageViews_Internal_Search_Phrase",
											"type": "String"
										},
										"sink": {
											"name": "PageViews_Internal_Search_Phrase",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Position",
											"type": "String"
										},
										"sink": {
											"name": "Events_Position",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_LinkID",
											"type": "String"
										},
										"sink": {
											"name": "Events_LinkID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Event_Type",
											"type": "String"
										},
										"sink": {
											"name": "Events_Event_Type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Payment_Method",
											"type": "String"
										},
										"sink": {
											"name": "Events_Payment_Method",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Shipping_Method",
											"type": "String"
										},
										"sink": {
											"name": "Events_Shipping_Method",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Sku",
											"type": "String"
										},
										"sink": {
											"name": "Events_Sku",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Quantity",
											"type": "String"
										},
										"sink": {
											"name": "Events_Quantity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Stock",
											"type": "String"
										},
										"sink": {
											"name": "Events_Stock",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Price",
											"type": "String"
										},
										"sink": {
											"name": "Events_Price",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Currency",
											"type": "String"
										},
										"sink": {
											"name": "Events_Currency",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Events_Order_Total_Amount",
											"type": "String"
										},
										"sink": {
											"name": "Events_Order_Total_Amount",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "VisitCount",
											"type": "Int32"
										},
										"sink": {
											"name": "VisitCount",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "LogsFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "HeapTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-29T20:27:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/LogsFile')]",
				"[concat(variables('workspaceId'), '/datasets/HeapTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Wikepedia_JDBC_Debug",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-05-06T17:23:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Wikepedia_JDBC_Debug')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://prod-21.canadacentral.logic.azure.com:443/workflows/9e13130a2d4141d8b3e191abbc7da05a/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=sn2X3r6_koY-pELmLZXEaT1bQh0cKDKzzoGDOmHhraI",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Wikipedia/Tests"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T22:19:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBI_DS_Refresh')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Refresh Power BI Dataset",
				"activities": [
					{
						"name": "GetAADToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantID,'/oauth2/token')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id=',pipeline().parameters.ClientID,'&client_secret=',pipeline().parameters.Secret)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Refresh PBI Dataset",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetAADToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.PBIWorkspaceID,'/datasets/',pipeline().parameters.PBIDatasetID,'/refreshes')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('GetAADToken').output.token_type),' ',string(activity('GetAADToken').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"value": "{\"Hello\":\"World\"}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TenantID": {
						"type": "string",
						"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
					},
					"ClientID": {
						"type": "string",
						"defaultValue": "3709ef92-90a9-4d35-8c87-17b85d9dbdd6"
					},
					"Secret": {
						"type": "string",
						"defaultValue": "l5C-0ViVH_0psGJpK_.Ddkv8S3Q6aAO018"
					},
					"PBIWorkspaceID": {
						"type": "string",
						"defaultValue": "7e8acec9-b7ce-4e00-b45e-3a55eb4f5cbb"
					},
					"PBIDatasetID": {
						"type": "string",
						"defaultValue": "df8724aa-d8bc-495e-9f4c-e06d2b944a39"
					}
				},
				"folder": {
					"name": "Wikipedia/Tests"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T22:19:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBI_DS_Refresh_Fail')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Refresh Power BI Dataset",
				"activities": [
					{
						"name": "GetAADToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantID,'/oauth2/token')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id=',pipeline().parameters.ClientID,'&client_secret=',pipeline().parameters.Secret)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Refresh PBI Dataset",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetAADToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.PBIWorkspaceID,'/datasets/',pipeline().parameters.PBIDatasetID,'/refreshes')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('GetAADToken').output.token_type),' ',string(activity('GetAADToken').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"value": "{\"Hello\":\"World\"}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TenantID": {
						"type": "string",
						"defaultValue": "o2f988bf-86f1-41af-91ab-2d7cd011db47"
					},
					"ClientID": {
						"type": "string",
						"defaultValue": "3709ef92-90a9-4d35-8c87-17b85d9dbdd6"
					},
					"Secret": {
						"type": "string",
						"defaultValue": "l5C-0ViVH_0psGJpK_.Ddkv8S3Q6aAO018"
					},
					"PBIWorkspaceID": {
						"type": "string",
						"defaultValue": "7e8acec9-b7ce-4e00-b45e-3a55eb4f5cbb"
					},
					"PBIDatasetID": {
						"type": "string",
						"defaultValue": "df8724aa-d8bc-495e-9f4c-e06d2b944a39"
					}
				},
				"folder": {
					"name": "Wikipedia/Tests"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T22:19:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TestNotebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Wikepedia",
								"type": "NotebookReference"
							},
							"parameters": {
								"yearWiki": {
									"value": "1969",
									"type": "string"
								},
								"monthWiki": {
									"value": "12",
									"type": "string"
								},
								"dayWiki": {
									"value": "20",
									"type": "string"
								}
							},
							"snapshot": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-04-20T14:14:08Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Wikepedia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wikipedia_ADB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Demo Wikipedia pour Azure Synapse avec Azure Databricks notebook",
				"activities": [
					{
						"name": "Get Storage Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureDataLakeStorage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Test if folder is created",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Storage Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Storage Metadata').output.Exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureDataLakeStorage",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Log Files download",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Test if folder is created",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Hours",
								"type": "Expression"
							},
							"batchCount": 6,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Logs_Wikipedia",
											"type": "DatasetReference",
											"parameters": {
												"YearDS": {
													"value": "@pipeline().parameters.Year",
													"type": "Expression"
												},
												"MonthDS": {
													"value": "@pipeline().parameters.Month",
													"type": "Expression"
												},
												"DayDS": {
													"value": "@pipeline().parameters.Day",
													"type": "Expression"
												},
												"HourDS": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureDataLakeStorageParam",
											"type": "DatasetReference",
											"parameters": {
												"YearDS": {
													"value": "@pipeline().parameters.Year",
													"type": "Expression"
												},
												"MonthDS": {
													"value": "@pipeline().parameters.Month",
													"type": "Expression"
												},
												"DayDS": {
													"value": "@pipeline().parameters.Day",
													"type": "Expression"
												},
												"HourDS": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Log Files download",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/franmer@microsoft.com/WikipediaSynapse_ADLSGen2",
							"baseParameters": {
								"yearWiki": {
									"value": "@pipeline().parameters.Year",
									"type": "Expression"
								},
								"monthWiki": {
									"value": "@pipeline().parameters.Month",
									"type": "Expression"
								},
								"dayWiki": {
									"value": "@pipeline().parameters.Day",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Day": {
						"type": "string"
					},
					"Hours": {
						"type": "array"
					}
				},
				"folder": {
					"name": "Wikipedia/Tests"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T22:19:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureDataLakeStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricks')]",
				"[concat(variables('workspaceId'), '/datasets/Logs_Wikipedia')]",
				"[concat(variables('workspaceId'), '/datasets/AzureDataLakeStorageParam')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wikipedia_AS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Demo Wikipedia pour Azure Synapse avec Azure Synapse Notebook. Notebook avec SQL account",
				"activities": [
					{
						"name": "Get Storage Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureDataLakeStorage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Test if folder is created",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Storage Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Storage Metadata').output.Exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "AzureDataLakeStorage",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Log Files download",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Test if folder is created",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Hours",
								"type": "Expression"
							},
							"batchCount": 6,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Logs_Wikipedia",
											"type": "DatasetReference",
											"parameters": {
												"YearDS": {
													"value": "@pipeline().parameters.Year",
													"type": "Expression"
												},
												"MonthDS": {
													"value": "@pipeline().parameters.Month",
													"type": "Expression"
												},
												"DayDS": {
													"value": "@pipeline().parameters.Day",
													"type": "Expression"
												},
												"HourDS": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureDataLakeStorageParam",
											"type": "DatasetReference",
											"parameters": {
												"YearDS": {
													"value": "@pipeline().parameters.Year",
													"type": "Expression"
												},
												"MonthDS": {
													"value": "@pipeline().parameters.Month",
													"type": "Expression"
												},
												"DayDS": {
													"value": "@pipeline().parameters.Day",
													"type": "Expression"
												},
												"HourDS": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Log Files download",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Wikepedia_JDBC",
								"type": "NotebookReference"
							},
							"parameters": {
								"yearWiki": {
									"value": {
										"value": "@pipeline().parameters.Year",
										"type": "Expression"
									},
									"type": "string"
								},
								"monthWiki": {
									"value": {
										"value": "@pipeline().parameters.Month",
										"type": "Expression"
									},
									"type": "string"
								},
								"dayWiki": {
									"value": {
										"value": "@pipeline().parameters.Day",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true
						}
					},
					{
						"name": "PBI Dataset Refresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Notebook1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://prod-21.canadacentral.logic.azure.com:443/workflows/9e13130a2d4141d8b3e191abbc7da05a/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=sn2X3r6_koY-pELmLZXEaT1bQh0cKDKzzoGDOmHhraI",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					},
					"Month": {
						"type": "string"
					},
					"Day": {
						"type": "string"
					},
					"Hours": {
						"type": "array",
						"defaultValue": [
							0,
							1,
							2,
							3,
							4,
							5,
							6,
							7,
							8,
							9,
							10,
							11,
							12,
							13,
							14,
							15,
							16,
							17,
							18,
							19,
							20,
							21,
							22,
							23
						]
					}
				},
				"folder": {
					"name": "Wikipedia"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-20T21:13:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/AzureDataLakeStorage')]",
				"[concat(variables('workspaceId'), '/notebooks/Wikepedia_JDBC')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/Logs_Wikipedia')]",
				"[concat(variables('workspaceId'), '/datasets/AzureDataLakeStorageParam')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AeffacerSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Aeffacer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "A effacer"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Customers List and Info.csv",
						"folderPath": "Public",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Aeffacer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AeffacerTarget')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage_Aeffacer",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "A effacer"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Target.csv",
						"fileSystem": "staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage_Aeffacer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TheVaultGen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Wikipedia"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "z1Wikipedia_datasets",
						"fileSystem": "wikipedia"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TheVaultGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorageParam')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Dataset with parameters",
				"linkedServiceName": {
					"referenceName": "TheVaultGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"YearDS": {
						"type": "string"
					},
					"MonthDS": {
						"type": "string"
					},
					"DayDS": {
						"type": "string"
					},
					"HourDS": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Wikipedia"
				},
				"annotations": [
					"Parameters"
				],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('pageviews-',dataset().YearDS,dataset().MonthDS,dataset().DayDS,if(less(int(dataset().HourDS),10),'-0','-'),dataset().HourDS,'0000.gz')",
							"type": "Expression"
						},
						"folderPath": "z1Wikipedia_datasets",
						"fileSystem": "wikipedia"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TheVaultGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HeapTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLPoolIngestion",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Visitors_Tracking_ID",
						"type": "varchar"
					},
					{
						"name": "Visitors_DE_Country_Name",
						"type": "varchar"
					},
					{
						"name": "Visitors_DE_City",
						"type": "varchar"
					},
					{
						"name": "Sessions_Client_ID",
						"type": "varchar"
					},
					{
						"name": "Sessions_Device_Segment",
						"type": "varchar"
					},
					{
						"name": "Sessions_Full_Device_Name",
						"type": "varchar"
					},
					{
						"name": "Sessions_Model",
						"type": "varchar"
					},
					{
						"name": "Sessions_OS",
						"type": "varchar"
					},
					{
						"name": "Sessions_Browser_Type",
						"type": "varchar"
					},
					{
						"name": "Sessions_Browser",
						"type": "varchar"
					},
					{
						"name": "Sessions_Session_Number",
						"type": "varchar"
					},
					{
						"name": "Sessions_Hour",
						"type": "varchar"
					},
					{
						"name": "Sessions_Session_Duration_Export",
						"type": "varchar"
					},
					{
						"name": "Sessions_Traffic_Source",
						"type": "varchar"
					},
					{
						"name": "Sessions_Referrer_Host",
						"type": "varchar"
					},
					{
						"name": "Sessions_Search_Phrase",
						"type": "varchar"
					},
					{
						"name": "PageViews_Campaign_PV",
						"type": "varchar"
					},
					{
						"name": "PageViews_Page_Country_Name",
						"type": "varchar"
					},
					{
						"name": "PageViews_Page_Language",
						"type": "varchar"
					},
					{
						"name": "PageViews_Page",
						"type": "varchar"
					},
					{
						"name": "PageViews_Animation",
						"type": "varchar"
					},
					{
						"name": "PageViews_Internal_Search_Phrase",
						"type": "varchar"
					},
					{
						"name": "Events_Position",
						"type": "varchar"
					},
					{
						"name": "Events_LinkID",
						"type": "varchar"
					},
					{
						"name": "Events_Event_Type",
						"type": "varchar"
					},
					{
						"name": "Events_Payment_Method",
						"type": "varchar"
					},
					{
						"name": "Events_Shipping_Method",
						"type": "varchar"
					},
					{
						"name": "Events_Sku",
						"type": "varchar"
					},
					{
						"name": "Events_Quantity",
						"type": "varchar"
					},
					{
						"name": "Events_Stock",
						"type": "varchar"
					},
					{
						"name": "Events_Price",
						"type": "varchar"
					},
					{
						"name": "Events_Currency",
						"type": "varchar"
					},
					{
						"name": "Events_Order_Total_Amount",
						"type": "varchar"
					},
					{
						"name": "VisitCount",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "01_Franmer_Demo_Heap"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SQLPoolIngestion')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LogsFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TheVaultGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "demofranmer.parquet",
						"folderPath": "parquets",
						"fileSystem": "azuresynapse2"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Visitors_Tracking_ID",
						"type": "UTF8"
					},
					{
						"name": "Visitors_DE_Country_Name",
						"type": "UTF8"
					},
					{
						"name": "Visitors_DE_City",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Client_ID",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Device_Segment",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Full_Device_Name",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Model",
						"type": "UTF8"
					},
					{
						"name": "Sessions_OS",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Browser_Type",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Browser",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Session_Number",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Hour",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Session_Duration_Export",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Traffic_Source",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Referrer_Host",
						"type": "UTF8"
					},
					{
						"name": "Sessions_Search_Phrase",
						"type": "UTF8"
					},
					{
						"name": "PageViews_Campaign_PV",
						"type": "UTF8"
					},
					{
						"name": "PageViews_Page_Country_Name",
						"type": "UTF8"
					},
					{
						"name": "PageViews_Page_Language",
						"type": "UTF8"
					},
					{
						"name": "PageViews_Page",
						"type": "UTF8"
					},
					{
						"name": "PageViews_Animation",
						"type": "UTF8"
					},
					{
						"name": "PageViews_Internal_Search_Phrase",
						"type": "UTF8"
					},
					{
						"name": "Events_Position",
						"type": "UTF8"
					},
					{
						"name": "Events_LinkID",
						"type": "UTF8"
					},
					{
						"name": "Events_Event_Type",
						"type": "UTF8"
					},
					{
						"name": "Events_Payment_Method",
						"type": "UTF8"
					},
					{
						"name": "Events_Shipping_Method",
						"type": "UTF8"
					},
					{
						"name": "Events_Sku",
						"type": "UTF8"
					},
					{
						"name": "Events_Quantity",
						"type": "UTF8"
					},
					{
						"name": "Events_Stock",
						"type": "UTF8"
					},
					{
						"name": "Events_Price",
						"type": "UTF8"
					},
					{
						"name": "Events_Currency",
						"type": "UTF8"
					},
					{
						"name": "Events_Order_Total_Amount",
						"type": "UTF8"
					},
					{
						"name": "VisitCount",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TheVaultGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Logs_Wikipedia')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Wikipedia_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"YearDS": {
						"type": "string"
					},
					"MonthDS": {
						"type": "string"
					},
					"DayDS": {
						"type": "string"
					},
					"HourDS": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Wikipedia"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat(dataset().YearDS,'/',dataset().YearDS,'-',dataset().MonthDS,'/pageviews-',dataset().YearDS,dataset().MonthDS,dataset().DayDS,if(less(int(dataset().HourDS),10),'-0','-'),dataset().HourDS,'0000.gz')",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Wikipedia_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage_Aeffacer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_Aeffacer_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDatabricks')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://eastus2.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS4_v2",
					"newClusterNumOfWorker": "2:8",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "5.5.x-scala2.11",
					"newClusterInitScripts": [],
					"clusterOption": "Fixed"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVault_Trust')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "A strong spirit transcends rules. ",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_Trust_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "franmersqlforsynapse East US",
				"annotations": [
					"East US"
				],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "7e8acec9-b7ce-4e00-b45e-3a55eb4f5cbb"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPoolIngestion')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('SQLPoolIngestion_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TheVaultGen2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Azure Data Lake Gen2 The vault",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('TheVaultGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('TheVaultGen2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wikipedia_LS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Link Service to Wikipedia logs",
				"annotations": [
					"Wikipedia"
				],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Wikipedia_LS_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/franmersynapse2-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('franmersynapse2-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/franmersynapse2-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('franmersynapse2-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_Create Heap Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [dbo].[01_Franmer_Demo_Heap]\n( \n\t[Visitors_Tracking_ID] [varchar](255)  NULL,\n\t[Visitors_DE_Country_Name] [varchar](255)  NULL,\n\t[Visitors_DE_City] [varchar](255)  NULL,\n\t[Sessions_Client_ID] [varchar](255)  NULL,\n\t[Sessions_Device_Segment] [varchar](255)  NULL,\n\t[Sessions_Full_Device_Name] [varchar](255)  NULL,\n\t[Sessions_Model] [varchar](255)  NULL,\n\t[Sessions_OS] [varchar](255)  NULL,\n\t[Sessions_Browser_Type] [varchar](255)  NULL,\n\t[Sessions_Browser] [varchar](255)  NULL,\n\t[Sessions_Session_Number] [varchar](255)  NULL,\n\t[Sessions_Hour] [varchar](255)  NULL,\n\t[Sessions_Session_Duration_Export] [varchar](255)  NULL,\n\t[Sessions_Traffic_Source] [varchar](255)  NULL,\n\t[Sessions_Referrer_Host] [varchar](255)  NULL,\n\t[Sessions_Search_Phrase] [varchar](255)  NULL,\n\t[PageViews_Campaign_PV] [varchar](255)  NULL,\n\t[PageViews_Page_Country_Name] [varchar](255)  NULL,\n\t[PageViews_Page_Language] [varchar](255)  NULL,\n\t[PageViews_Page] [varchar](255)  NULL,\n\t[PageViews_Animation] [varchar](255)  NULL,\n\t[PageViews_Internal_Search_Phrase] [varchar](255)  NULL,\n\t[Events_Position] [varchar](255)  NULL,\n\t[Events_LinkID] [varchar](255)  NULL,\n\t[Events_Event_Type] [varchar](255)  NULL,\n\t[Events_Payment_Method] [varchar](255)  NULL,\n\t[Events_Shipping_Method] [varchar](255)  NULL,\n\t[Events_Sku] [varchar](255)  NULL,\n\t[Events_Quantity] [varchar](255)  NULL,\n\t[Events_Stock] [varchar](255)  NULL,\n\t[Events_Price] [varchar](255)  NULL,\n\t[Events_Currency] [varchar](255)  NULL,\n\t[Events_Order_Total_Amount] [varchar](255)  NULL,\n\t[VisitCount] [int]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_Create CTAS Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Create table with HASH Distribution and CCI ",
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "EXECUTE AS USER = 'IngestAccount'\n\n\nCREATE TABLE [dbo].[02_Franmer_Demo_Hash]\nWITH\n(\n DISTRIBUTION = HASH ( [Visitors_DE_Country_Name] )\n ,CLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT  *\nFROM    [dbo].[01_Franmer_Demo_Heap]; \n\nSELECT COUNT_BIG(*) as Nb_Rows FROM [dbo].[02_Franmer_Demo_Hash]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_Create Aggregation Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Prepare table for Power BI composite model",
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "EXECUTE AS USER = 'IngestAccount'\n\nCREATE TABLE [dbo].[03_Franmer_Demo_Hash_aggr]\nWITH\n(\n DISTRIBUTION = ROUND_ROBIN\n ,CLUSTERED COLUMNSTORE INDEX\n)\n\nAS\n\nSELECT [Visitors_DE_City]\n,[Sessions_Device_Segment]\n,[Sessions_Model]\n,[Sessions_OS]\n,[Sessions_Browser_Type]\n,[Sessions_Traffic_Source]\n,SUM ([VisitCount]) As VisitCount\n FROM [dbo].[02_Franmer_Demo_Hash]\nGROUP BY [Visitors_DE_City], [Sessions_Device_Segment],[Sessions_Model], [Sessions_OS], [Sessions_Browser_Type], [Sessions_Traffic_Source]\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/09_Reset_Franmer_Demo')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Reset demo",
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "DROP TABLE [dbo].[01_Franmer_Demo_Heap]\nDROP TABLE [dbo].[02_Franmer_Demo_Hash]\nDROP TABLE [dbo].[03_Franmer_Demo_Hash_aggr]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_Create Long running query')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Monitoring"
				},
				"content": {
					"query": "--CREATE PROC spWait @Seconds INT\n--AS\n--BEGIN\n\n--    DECLARE @BEGIN DATETIME\n--    DECLARE @END DATETIME \n\n--    SET @BEGIN = GETDATE()\n--    SET @END = DATEADD(\"SECOND\",@Seconds,@BEGIN)\n--\n--    WHILE (@BEGIN<@END)\n--    BEGIN   \n--        SET @BEGIN=GETDATE()\n--    END\n\n--END\n\nSelect * FROM [01_Franmer_Demo_Heap]\n--EXEC spWait 10\n--Select * FROM NYCTaxiTripSmall\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_Demo')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Performance Demo"
				},
				"content": {
					"query": "Select * FROM [01_Franmer_Demo_Heap]\n\nEXEC dbo.sp_whoisactive;\n\nEXEC dbo.sp_whoisactive_deepdive @request_id = 'QID22697', @distributions = 0, @tempdb = 0",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/0_Monitoring Demo')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Monitoring"
				},
				"content": {
					"query": "-- Let's start a long running query\nSelect * FROM [01_Franmer_Demo_Heap]\n\n\n-- Other Active Connections\nSELECT * FROM sys.dm_pdw_exec_sessions where status <> 'Closed' and session_id <> session_id();\n\n\n--- STEP 1: Identify the query you wish to investigate\n-- Monitor active queries\nSELECT *\nFROM sys.dm_pdw_exec_requests\nWHERE status not in ('Completed','Failed','Cancelled')\n  AND session_id <> session_id()\nORDER BY submit_time DESC;\n\n-- Find top 10 queries longest running queries\nSELECT TOP 10 *\nFROM sys.dm_pdw_exec_requests\nORDER BY total_elapsed_time DESC;\n\n\n\n--- STEP 2: Investigate the query plan\n-------------------------------------------\n-- Query with Label\nSELECT *\nFROM sys.tables\nOPTION (LABEL = 'My Query')\n;\n\n-- Find a query with the Label 'My Query'\n-- Use brackets when querying the label column, as it it a key word\nSELECT  *\nFROM    sys.dm_pdw_exec_requests\nWHERE   [label] = 'My Query';\n-------------------------------------------\n\n-- Find the distributed query plan steps for a specific query.\n-- Replace request_id with value from Step 1.\nDECLARE @QueryID VARCHAR(10) \nSET @QueryID = 'QID22799'\nSELECT * FROM sys.dm_pdw_request_steps\n-- WHERE request_id = 'QID22799'\nWHERE request_id = @QueryID\nORDER BY step_index;\n\n\n\n--- STEP 3: Investigate SQL on the distributed databases\n-- Find the distribution run times for a SQL step.\n-- Replace request_id and step_index with values from Step 1 and 3.\n\nSELECT * FROM sys.dm_pdw_sql_requests\nWHERE request_id = 'QID22799' -- AND step_index = 2;\n\n\n\n-- Find the SQL Server execution plan for a query running on a specific SQL pool or control node.\n-- Replace distribution_id and spid with values from previous query.\n\nDBCC PDW_SHOWEXECUTIONPLAN(1, 220);\n\n\n--- STEP 4: Investigate data movement on the distributed databases\n\n-- Find information about all the workers completing a Data Movement Step.\n-- Replace request_id and step_index with values from Step 1 and 3.\n\nSELECT * FROM sys.dm_pdw_dms_workers\nWHERE request_id = 'QID22799' AND step_index = 2;\n\n\n-- Find the SQL Server estimated plan for a query running on a specific SQL pool Compute or control node.\n-- Replace distribution_id and spid with values from previous query.\n\nDBCC PDW_SHOWEXECUTIONPLAN(55, 238);\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Azure Purview Login')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- Create Login\nCREATE LOGIN FranmerPurview FROM EXTERNAL PROVIDER;\n\n\n-- Use a managed identity for DEDICATED SQL databases\nCREATE USER FranmerPurview FROM EXTERNAL PROVIDER\nGO\n\nEXEC sp_addrolemember 'db_datareader', FranmerPurview\nGO\n\n-- Use a managed identity for SERVERLESS SQL databases\nCREATE USER FranmerPurview FOR LOGIN FranmerPurview;\nALTER ROLE db_datareader ADD MEMBER FranmerPurview;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create External Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "External Table to CSV",
				"content": {
					"query": "-- Master Key creation\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Pass123';\nGO\n\n-- Scoped Credential\nCREATE DATABASE SCOPED CREDENTIAL [sqlondemand]\nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = 'sv=2020-02-10&st=2021-09-22T16%3A24%3A14Z&se=2040-12-03T17%3A24%3A00Z&sr=c&sp=rle&sig=Vqbw3hSTgbwc2P7wOhVQmLVItiqsxckCaBGm1evKws0%3D'\nGO\n\n-- If scoped credential is needed\n-- ALTER DATABASE SCOPED CREDENTIAL [sqlondemand] WITH IDENTITY = 'SHARED ACCESS SIGNATURE',\n-- SECRET = 'sv=2020-02-10&st=2021-09-22T16%3A24%3A14Z&se=2040-12-03T17%3A24%3A00Z&sr=c&sp=rle&sig=Vqbw3hSTgbwc2P7wOhVQmLVItiqsxckCaBGm1evKws0%3D'\n-- GO\n\n\n\n-- External Data Source\nCREATE EXTERNAL DATA SOURCE SqlOnDemandDemo WITH (\n    LOCATION = 'https://thevaultgen2.blob.core.windows.net',\n    CREDENTIAL = sqlondemand\n);\n\n-- External File Format\nCREATE EXTERNAL FILE FORMAT CSVInternalDemo\nWITH\n(  \n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS (\n        FIELD_TERMINATOR = ','\n    )\n)\n\n-- Create External Table\nCREATE EXTERNAL TABLE dbo.Contoso_EXT (\n   Location_ID VARCHAR(10),\n   Ind_Location VARCHAR(50),\n   C1 VARCHAR(10),\n   C2 VARCHAR(10),\n   C3 VARCHAR(10)\n\n)\nWITH (\n    LOCATION='/csv/internalDemo.csv',\n    DATA_SOURCE=SqlOnDemandDemo,\n    FILE_FORMAT=CSVInternalDemo\n);\n\nSelect * From dbo.Contoso_EXT\n\n\n-- Reset Demo --\nDROP EXTERNAL TABLE dbo.Contoso_EXT\nDROP EXTERNAL FILE FORMAT CSVInternalDemo\nDROP EXTERNAL DATA SOURCE SqlOnDemandDemo \nDROP DATABASE SCOPED CREDENTIAL [sqlondemand] \n\n\nGRANT REFERENCES ON DATABASE SCOPED CREDENTIAL::[sqlondemand] TO [FranmerPurview];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "FranmerServerlessDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Long Running Query')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Performance Demo"
				},
				"content": {
					"query": "Select * FROM [01_Franmer_Demo_Heap]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Monitor Memory')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Monitoring"
				},
				"content": {
					"query": "-- Memory consumption\nSELECT\n  pc1.cntr_value as Curr_Mem_KB,\n  pc1.cntr_value/1024.0 as Curr_Mem_MB,\n  (pc1.cntr_value/1048576.0) as Curr_Mem_GB,\n  pc2.cntr_value as Max_Mem_KB,\n  pc2.cntr_value/1024.0 as Max_Mem_MB,\n  (pc2.cntr_value/1048576.0) as Max_Mem_GB,\n  pc1.cntr_value * 100.0/pc2.cntr_value AS Memory_Utilization_Percentage,\n  pc1.pdw_node_id\nFROM\n-- pc1: current memory\nsys.dm_pdw_nodes_os_performance_counters AS pc1\n-- pc2: total memory allowed for this SQL instance\nJOIN sys.dm_pdw_nodes_os_performance_counters AS pc2\nON pc1.object_name = pc2.object_name AND pc1.pdw_node_id = pc2.pdw_node_id\nWHERE\npc1.counter_name = 'Total Server Memory (KB)'\nAND pc2.counter_name = 'Target Server Memory (KB)'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Monitor transaction log rollback')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Monitoring"
				},
				"content": {
					"query": "-- Monitor rollback\n-- If your queries are failing or taking a long time to proceed, \n-- you can check and monitor if you have any transactions rolling back.\n\nSELECT\n    SUM(CASE WHEN t.database_transaction_next_undo_lsn IS NOT NULL THEN 1 ELSE 0 END),\n    t.pdw_node_id,\n    nod.[type]\nFROM sys.dm_pdw_nodes_tran_database_transactions t\nJOIN sys.dm_pdw_nodes nod ON t.pdw_node_id = nod.pdw_node_id\nGROUP BY t.pdw_node_id, nod.[type]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Monitor transaction log size')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Monitoring"
				},
				"content": {
					"query": "-- Transaction log size\n-- The following query returns the transaction log size on each distribution. \n-- If one of the log files is reaching 160 GB, you should consider scaling up your instance or limiting your transaction size.\n\nSELECT\n  instance_name as distribution_db,\n  cntr_value*1.0/1048576 as log_file_size_used_GB,\n  pdw_node_id\nFROM sys.dm_pdw_nodes_os_performance_counters\nWHERE\ninstance_name like 'Distribution_%'\nAND counter_name = 'Log File(s) Used Size (KB)'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Monitoring TempDB')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Monitoring"
				},
				"content": {
					"query": "----- Create Views\nPRINT 'Info: Creating the ''microsoft.vw_sql_requests'' view';\nGO\n\nCREATE VIEW microsoft.vw_sql_requests\nAS\n(\n\tSELECT\n\t\tsr.request_id,\n\t\tsr.step_index,\n\t\t(CASE WHEN (sr.distribution_id = -1 ) THEN (SELECT pdw_node_id FROM sys.dm_pdw_nodes WHERE type = 'CONTROL') ELSE d.pdw_node_id END) AS pdw_node_id,\n\t\tsr.distribution_id,\n\t\tsr.status,\n\t\tsr.error_id,\n\t\tsr.start_time,\n\t\tsr.end_time,\n\t\tsr.total_elapsed_time,\n\t\tsr.row_count,\n\t\tsr.spid,\n\t\tsr.command\n\tFROM\n\t\tsys.pdw_distributions AS d\n\t\tRIGHT JOIN sys.dm_pdw_sql_requests AS sr ON d.distribution_id = sr.distribution_id\n)\nGO\n------------------------------\n\n\n-- Monitor tempdb\nSELECT\n    sr.request_id,\n    ssu.session_id,\n    ssu.pdw_node_id,\n    sr.command,\n    sr.total_elapsed_time,\n    exs.login_name AS 'LoginName',\n    DB_NAME(ssu.database_id) AS 'DatabaseName',\n    (es.memory_usage * 8) AS 'MemoryUsage (in KB)',\n    (ssu.user_objects_alloc_page_count * 8) AS 'Space Allocated For User Objects (in KB)',\n    (ssu.user_objects_dealloc_page_count * 8) AS 'Space Deallocated For User Objects (in KB)',\n    (ssu.internal_objects_alloc_page_count * 8) AS 'Space Allocated For Internal Objects (in KB)',\n    (ssu.internal_objects_dealloc_page_count * 8) AS 'Space Deallocated For Internal Objects (in KB)',\n    CASE es.is_user_process\n    WHEN 1 THEN 'User Session'\n    WHEN 0 THEN 'System Session'\n    END AS 'SessionType',\n    es.row_count AS 'RowCount'\nFROM sys.dm_pdw_nodes_db_session_space_usage AS ssu\n    INNER JOIN sys.dm_pdw_nodes_exec_sessions AS es ON ssu.session_id = es.session_id AND ssu.pdw_node_id = es.pdw_node_id\n    INNER JOIN sys.dm_pdw_nodes_exec_connections AS er ON ssu.session_id = er.session_id AND ssu.pdw_node_id = er.pdw_node_id\n    INNER JOIN microsoft.vw_sql_requests AS sr ON ssu.session_id = sr.spid AND ssu.pdw_node_id = sr.pdw_node_id\n    LEFT JOIN sys.dm_pdw_exec_requests exr on exr.request_id = sr.request_id\n    LEFT JOIN sys.dm_pdw_exec_sessions exs on exr.session_id = exs.session_id\nWHERE DB_NAME(ssu.database_id) = 'tempdb'\n    AND es.session_id <> @@SPID\n    AND es.login_name <> 'sa'\nORDER BY sr.request_id;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Monitoring waiting queries')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Monitoring"
				},
				"content": {
					"query": "-- Find queries\n-- Replace request_id with value from Step 1.\n\nSELECT waits.session_id,\n      waits.request_id,  \n      requests.command,\n      requests.status,\n      requests.start_time,  \n      waits.type,\n      waits.state,\n      waits.object_type,\n      waits.object_name\nFROM   sys.dm_pdw_waits waits\n   JOIN  sys.dm_pdw_exec_requests requests\n   ON waits.request_id=requests.request_id\nWHERE waits.request_id = 'QID####'\nORDER BY waits.object_name, waits.object_type, waits.state;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rowgroup trimming')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": "CREATE VIEW dbo.vCS_rg_physical_stats\nAS\nWITH cte\nAS\n(\nselect   tb.[name]                    AS [logical_table_name]\n,        rg.[row_group_id]            AS [row_group_id]\n,        rg.[state]                   AS [state]\n,        rg.[state_desc]              AS [state_desc]\n,        rg.[total_rows]              AS [total_rows]\n,        rg.[trim_reason_desc]        AS trim_reason_desc\n,        mp.[physical_name]           AS physical_name\nFROM    sys.[schemas] sm\nJOIN    sys.[tables] tb               ON  sm.[schema_id]          = tb.[schema_id]\nJOIN    sys.[pdw_table_mappings] mp   ON  tb.[object_id]          = mp.[object_id]\nJOIN    sys.[pdw_nodes_tables] nt     ON  nt.[name]               = mp.[physical_name]\nJOIN    sys.[dm_pdw_nodes_db_column_store_row_group_physical_stats] rg      ON  rg.[object_id]     = nt.[object_id]\n                                                                            AND rg.[pdw_node_id]   = nt.[pdw_node_id]\n                                        AND rg.[distribution_id]    = nt.[distribution_id]\n)\nSELECT *\nFROM cte;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Taxi_Create Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'NYCTaxiTripSmall' AND O.TYPE = 'U' AND S.NAME = 'dbo')\nCREATE TABLE dbo.NYCTaxiTripSmall\n    (\n     [DateID] int,\n     [MedallionID] int,\n     [HackneyLicenseID] int,\n     [PickupTimeID] int,\n     [DropoffTimeID] int,\n     [PickupGeographyID] int,\n     [DropoffGeographyID] int,\n     [PickupLatitude] float,\n     [PickupLongitude] float,\n     [PickupLatLong] nvarchar(4000),\n     [DropoffLatitude] float,\n     [DropoffLongitude] float,\n     [DropoffLatLong] nvarchar(4000),\n     [PassengerCount] int,\n     [TripDurationSeconds] int,\n     [TripDistanceMiles] float,\n     [PaymentType] nvarchar(4000),\n     [FareAmount] numeric(19,4),\n     [SurchargeAmount] numeric(19,4),\n     [TaxAmount] numeric(19,4),\n     [TipAmount] numeric(19,4),\n     [TollsAmount] numeric(19,4),\n     [TotalAmount] numeric(19,4)\n    )\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.NYCTaxiTripSmall\n(DateID 1, MedallionID 2, HackneyLicenseID 3, PickupTimeID 4, DropoffTimeID 5,\nPickupGeographyID 6, DropoffGeographyID 7, PickupLatitude 8, PickupLongitude 9, \nPickupLatLong 10, DropoffLatitude 11, DropoffLongitude 12, DropoffLatLong 13, \nPassengerCount 14, TripDurationSeconds 15, TripDistanceMiles 16, PaymentType 17, \nFareAmount 18, SurchargeAmount 19, TaxAmount 20, TipAmount 21, TollsAmount 22, \nTotalAmount 23)\nFROM 'https://thevaultgen2.dfs.core.windows.net/taxi/NYCTripSmall.parquet'\nWITH\n(\n    FILE_TYPE = 'PARQUET'\n    ,MAXERRORS = 0\n    ,IDENTITY_INSERT = 'OFF'\n)\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Taxi_Query')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Demo"
				},
				"content": {
					"query": "\nEXPLAIN\nSELECT PassengerCount,\n      SUM(TripDistanceMiles) as SumTripDistance,\n      AVG(TripDistanceMiles) as AvgTripDistance\nFROM  dbo.NYCTaxiTripSmall\nWHERE TripDistanceMiles > 0 AND PassengerCount > 0\nGROUP BY PassengerCount\nORDER BY PassengerCount;\n\n\nCREATE LOGIN Demo WITH PASSWORD = 'Code1Code1';\n\n\n\nCREATE USER Demo From LOGIN Demo\nEXEC sp_addrolemember 'db_owner', 'Demo'; ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sp_synapse_queries')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Performance Demo"
				},
				"content": {
					"query": "\nCREATE PROC [dbo].[sp_whoisactive] AS\n\nIF EXISTS (SELECT * FROM sys.dm_pdw_exec_requests WHERE status = 'Suspended' AND session_id <> session_id())\nBEGIN\n\n\tSELECT    DISTINCT s.session_id,\n\t\t\ts.request_id,\n\t\t\t--s.login_time,\n\t\t\ts.login_name,\n\t\t\ta.status,\n\t\t\tDATEDIFF(MINUTE,a.start_time,GETDATE()) AS running_time\t,\n\t\t\tDATEDIFF(MINUTE,a.submit_time,a.start_time) AS time_in_queue\t,\n\t\t\tDATEADD(HOUR,2,a.submit_time\t\t) AS submit_time\t\t,\n\t\t\tDATEADD(HOUR,2,a.start_time\t\t\t) AS start_time\t\t\t,\n\t\t\tDATEADD(HOUR,2,a.end_compile_time\t) AS end_compile_time\t,\n\t\t\tDATEADD(HOUR,2,a.end_time\t\t\t) AS end_time\t\t\t,\n\t\t\ta.[label],\n\t\t\ta.command,\n\t\t\tl.blocking_session_id,\n\t\t\ts.app_name,\n\t\t\tA.resource_class,\n\t\tCONCAT('EXEC dbo.sp_whoisactive_deepdive @request_id = ''',s.request_id,''', @distributions = 0, @tempdb = 0') deepdive\n\t\t\t--SELECT COUNT(*)\n\tFROM    sys.dm_pdw_exec_sessions s\n\tLEFT JOIN sys.dm_pdw_exec_requests a ON        s.request_id = a.request_id\n\tLEFT JOIN (\n\t\t\t\tSELECT  t1.request_session_id,\n\t\t\t\t\t\tt2.blocking_session_id\n\t\t\t\tFROM sys.dm_pdw_nodes_tran_locks as t1\n\t\t\t\tLEFT JOIN sys.dm_pdw_nodes_os_waiting_tasks as t2\n\t\t\t\tON t1.lock_owner_address = t2.resource_address\n\t\t\t) l\n\tON        l.request_session_id = s.sql_spid\n\tWHERE    a.status IN ('Suspended')\n\tAND\t\ts.session_id <> Session_id() \n\tORDER BY start_time DESC\n\nEND\n\n\tSELECT    DISTINCT s.session_id,\n\t\t\ts.request_id,\n\t\t\t--s.login_time,\n\t\t\ts.login_name,\n\t\t\ta.status,\n\t\t\tDATEDIFF(MINUTE,a.start_time,GETDATE()) AS running_time\t,\n\t\t\tDATEDIFF(MINUTE,a.submit_time,a.start_time) AS time_in_queue\t,\n\t\t\tDATEADD(HOUR,2,a.submit_time\t\t) AS submit_time\t\t,\n\t\t\tDATEADD(HOUR,2,a.start_time\t\t\t) AS start_time\t\t\t,\n\t\t\tDATEADD(HOUR,2,a.end_compile_time\t) AS end_compile_time\t,\n\t\t\tDATEADD(HOUR,2,a.end_time\t\t\t) AS end_time\t\t\t,\n\t\t\ta.[label],\n\t\t\ta.command,\n\t\t\tl.blocking_session_id,\n\t\t\ts.app_name,\n\t\t\tA.resource_class,\n\t\tCONCAT('EXEC dbo.sp_whoisactive_deepdive @request_id = ''',s.request_id,''', @distributions = 0, @tempdb = 0') deepdive\n\t\t\t--SELECT COUNT(*)\n\tFROM    sys.dm_pdw_exec_sessions s\n\tLEFT JOIN sys.dm_pdw_exec_requests a ON        s.request_id = a.request_id\n\tLEFT JOIN (\n\t\t\t\tSELECT  t1.request_session_id,\n\t\t\t\t\t\tt2.blocking_session_id\n\t\t\t\tFROM sys.dm_pdw_nodes_tran_locks as t1\n\t\t\t\tLEFT JOIN sys.dm_pdw_nodes_os_waiting_tasks as t2\n\t\t\t\tON t1.lock_owner_address = t2.resource_address\n\t\t\t) l\n\tON        l.request_session_id = s.sql_spid\n\tWHERE    a.status IN ('Running')\n\tAND\t\ts.session_id <> Session_id() \n\tORDER BY start_time DESC\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sp_synapse_queries_combined')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Performance Demo"
				},
				"content": {
					"query": "CREATE PROC [dbo].[sp_whoisactive] AS\n\nIF EXISTS (SELECT * FROM sys.dm_pdw_exec_requests WHERE status = 'Suspended' AND session_id <> session_id())\nBEGIN\n\n\tSELECT    DISTINCT s.session_id,\n\t\t\ts.request_id,\n\t\t\t--s.login_time,\n\t\t\ts.login_name,\n\t\t\ta.status,\n\t\t\tDATEDIFF(MINUTE,a.start_time,GETDATE()) AS running_time\t,\n\t\t\tDATEDIFF(MINUTE,a.submit_time,a.start_time) AS time_in_queue\t,\n\t\t\tDATEADD(HOUR,2,a.submit_time\t\t) AS submit_time\t\t,\n\t\t\tDATEADD(HOUR,2,a.start_time\t\t\t) AS start_time\t\t\t,\n\t\t\tDATEADD(HOUR,2,a.end_compile_time\t) AS end_compile_time\t,\n\t\t\tDATEADD(HOUR,2,a.end_time\t\t\t) AS end_time\t\t\t,\n\t\t\ta.[label],\n\t\t\ta.command,\n\t\t\tl.blocking_session_id,\n\t\t\ts.app_name,\n\t\t\tA.resource_class,\n\t\tCONCAT('EXEC dbo.sp_whoisactive_deepdive @request_id = ''',s.request_id,''', @distributions = 0, @tempdb = 0') deepdive\n\t\t\t--SELECT COUNT(*)\n\tFROM    sys.dm_pdw_exec_sessions s\n\tLEFT JOIN sys.dm_pdw_exec_requests a ON        s.request_id = a.request_id\n\tLEFT JOIN (\n\t\t\t\tSELECT  t1.request_session_id,\n\t\t\t\t\t\tt2.blocking_session_id\n\t\t\t\tFROM sys.dm_pdw_nodes_tran_locks as t1\n\t\t\t\tLEFT JOIN sys.dm_pdw_nodes_os_waiting_tasks as t2\n\t\t\t\tON t1.lock_owner_address = t2.resource_address\n\t\t\t) l\n\tON        l.request_session_id = s.sql_spid\n\tWHERE    a.status IN ('Suspended')\n\tAND\t\ts.session_id <> Session_id() \n\tORDER BY start_time DESC\n\nEND\n\n\tSELECT    DISTINCT s.session_id,\n\t\t\ts.request_id,\n\t\t\t--s.login_time,\n\t\t\ts.login_name,\n\t\t\ta.status,\n\t\t\tDATEDIFF(MINUTE,a.start_time,GETDATE()) AS running_time\t,\n\t\t\tDATEDIFF(MINUTE,a.submit_time,a.start_time) AS time_in_queue\t,\n\t\t\tDATEADD(HOUR,2,a.submit_time\t\t) AS submit_time\t\t,\n\t\t\tDATEADD(HOUR,2,a.start_time\t\t\t) AS start_time\t\t\t,\n\t\t\tDATEADD(HOUR,2,a.end_compile_time\t) AS end_compile_time\t,\n\t\t\tDATEADD(HOUR,2,a.end_time\t\t\t) AS end_time\t\t\t,\n\t\t\ta.[label],\n\t\t\ta.command,\n\t\t\tl.blocking_session_id,\n\t\t\ts.app_name,\n\t\t\tA.resource_class,\n\t\tCONCAT('EXEC dbo.sp_whoisactive_deepdive @request_id = ''',s.request_id,''', @distributions = 0, @tempdb = 0') deepdive\n\t\t\t--SELECT COUNT(*)\n\tFROM    sys.dm_pdw_exec_sessions s\n\tLEFT JOIN sys.dm_pdw_exec_requests a ON        s.request_id = a.request_id\n\tLEFT JOIN (\n\t\t\t\tSELECT  t1.request_session_id,\n\t\t\t\t\t\tt2.blocking_session_id\n\t\t\t\tFROM sys.dm_pdw_nodes_tran_locks as t1\n\t\t\t\tLEFT JOIN sys.dm_pdw_nodes_os_waiting_tasks as t2\n\t\t\t\tON t1.lock_owner_address = t2.resource_address\n\t\t\t) l\n\tON        l.request_session_id = s.sql_spid\n\tWHERE    a.status IN ('Running')\n\tAND\t\ts.session_id <> Session_id() \n\tORDER BY start_time DESC\nGO\n\n\n\nCREATE PROC [dbo].[sp_whoisactive_deepdive] @request_id [varchar](20),@distributions [bit],@tempdb [bit] AS\n\n\nPRINT ' __        ___   _    _  _____      _    __  __   ___   _     ___   ___  _  _____ _   _  ____      _  _____ ___ '\nPRINT ' \\ \\      / / | | |  / \\|_   _|    / \\  |  \\/  | |_ _| | |   / _ \\ / _ \\| |/ /_ _| \\ | |/ ___|    / \\|_   _|__ \\'\nPRINT '  \\ \\ /\\ / /| |_| | / _ \\ | |     / _ \\ | |\\/| |  | |  | |  | | | | | | |   / | ||  \\| | |  _    / _ \\ | |   / /'\nPRINT '   \\ V  V / |  _  |/ ___ \\| |    / ___ \\| |  | |  | |  | |__| |_| | |_| | . \\ | || |\\  | |_| |  / ___ \\| |  |_| '\nPRINT '    \\_/\\_/  |_| |_/_/   \\_\\_|   /_/   \\_\\_|  |_| |___| |_____\\___/ \\___/|_|\\_\\___|_| \\_|\\____| /_/   \\_\\_|  (_) '\n\n\nPRINT 'READ MORE AT: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/sql-data-warehouse-manage-monitor'\n                                                                                                                \n\nPRINT '-> QUERY STEPS/PLAN'\nPRINT '-> SESSION STEPS AND INFORMATION'\nPRINT '-> LOCK ESCALATION'\nIF @distributions = 1\n\tPRINT '-> QUERY STEPS ON ALL DISTRIBUTED DATABASES'\nIF @distributions = 1\n\tPRINT '-> DATA MOVEMENT STEPS ON EACH DISTRIBUTION'\nIF @tempdb = 1\n\tPRINT '-> TEMPDB INFO'\n\n\nSELECT\t*\nFROM\tsys.dm_pdw_request_steps \nWHERE\trequest_id = @request_id\nORDER BY step_index;\n\nSELECT\t\ts.session_id,\n\t\t\ts.request_id,\n\t\t\t--s.login_time,\n\t\t\ts.login_name,\n\t\t\ta.status,\n\t\t\tDATEDIFF(MINUTE,a.start_time,GETDATE()) AS running_time\t,\n\t\t\tDATEDIFF(MINUTE,a.submit_time,a.start_time) AS time_in_queue\t,\n\t\t\tDATEADD(HOUR,2,a.submit_time\t\t) AS submit_time\t\t,\n\t\t\tDATEADD(HOUR,2,a.start_time\t\t\t) AS start_time\t\t\t,\n\t\t\tDATEADD(HOUR,2,a.end_compile_time\t) AS end_compile_time\t,\n\t\t\tDATEADD(HOUR,2,a.end_time\t\t\t) AS end_time\t\t\t,\n\t\t\ta.[label],\n\t\t\ta.command,\n\t\t\t--l.blocking_session_id,\n\t\t\ts.app_name,\n\t\t\tA.resource_class,\n\t\t\tCONCAT('EXEC dbo.sp_whoisactive_deepdive @request_id = ''',s.request_id,''', @distributions = 0, @tempdb = 0') deepdive\nFROM\t\tsys.dm_pdw_exec_sessions s\nLEFT JOIN\tsys.dm_pdw_exec_requests a ON        s.session_id = a.session_id\nWHERE\t\ts.session_id = (SELECT TOP 1 session_id FROM sys.dm_pdw_exec_sessions WHERE request_id = @request_id)\n\nSELECT waits.session_id,\n      waits.request_id,  \n      requests.command,\n      requests.status,\n      requests.start_time,  \n      waits.type,\n      waits.state,\n      waits.object_type,\n      waits.object_name\nFROM   sys.dm_pdw_waits waits\n   JOIN  sys.dm_pdw_exec_requests requests\n   ON waits.request_id=requests.request_id\nWHERE waits.request_id = @request_id\nORDER BY waits.object_name, waits.object_type, waits.state;\n\nIF @distributions = 1\nBEGIN\n\tSELECT * FROM sys.dm_pdw_sql_requests\n\tWHERE request_id = @request_id AND step_index = 2;\n\n\tSELECT * FROM sys.dm_pdw_dms_workers\n\tWHERE request_id = @request_id AND step_index = 2;\nEND\n\nIF @tempdb = 1\nBEGIN\nSELECT\n    sr.request_id,\n    ssu.session_id,\n    ssu.pdw_node_id,\n    sr.command,\n    sr.total_elapsed_time,\n    es.login_name AS 'LoginName',\n    DB_NAME(ssu.database_id) AS 'DatabaseName',\n    (es.memory_usage * 8) AS 'MemoryUsage (in KB)',\n    (ssu.user_objects_alloc_page_count * 8) AS 'Space Allocated For User Objects (in KB)',\n    (ssu.user_objects_dealloc_page_count * 8) AS 'Space Deallocated For User Objects (in KB)',\n    (ssu.internal_objects_alloc_page_count * 8) AS 'Space Allocated For Internal Objects (in KB)',\n    (ssu.internal_objects_dealloc_page_count * 8) AS 'Space Deallocated For Internal Objects (in KB)',\n    CASE es.is_user_process\n    WHEN 1 THEN 'User Session'\n    WHEN 0 THEN 'System Session'\n    END AS 'SessionType',\n    es.row_count AS 'RowCount'\nFROM sys.dm_pdw_nodes_db_session_space_usage AS ssu\n    INNER JOIN sys.dm_pdw_nodes_exec_sessions AS es ON ssu.session_id = es.session_id AND ssu.pdw_node_id = es.pdw_node_id\n    INNER JOIN sys.dm_pdw_nodes_exec_connections AS er ON ssu.session_id = er.session_id AND ssu.pdw_node_id = er.pdw_node_id\n    INNER JOIN microsoft.vw_sql_requests AS sr ON ssu.session_id = sr.spid AND ssu.pdw_node_id = sr.pdw_node_id\nWHERE DB_NAME(ssu.database_id) = 'tempdb'\n    AND es.session_id <> @@SPID\n    AND es.login_name <> 'sa'\n\tAND\tsr.request_id = @request_id\nORDER BY sr.request_id;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "franmerSQLPool",
						"poolName": "franmerSQLPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sp_synapse_queries_deepdive')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Performance Demo"
				},
				"content": {
					"query": "\n\nCREATE PROC [dbo].[sp_whoisactive_deepdive] @request_id [varchar](20),@distributions [bit],@tempdb [bit] AS\n\n\nPRINT ' __        ___   _    _  _____      _    __  __   ___   _     ___   ___  _  _____ _   _  ____      _  _____ ___ '\nPRINT ' \\ \\      / / | | |  / \\|_   _|    / \\  |  \\/  | |_ _| | |   / _ \\ / _ \\| |/ /_ _| \\ | |/ ___|    / \\|_   _|__ \\'\nPRINT '  \\ \\ /\\ / /| |_| | / _ \\ | |     / _ \\ | |\\/| |  | |  | |  | | | | | | |   / | ||  \\| | |  _    / _ \\ | |   / /'\nPRINT '   \\ V  V / |  _  |/ ___ \\| |    / ___ \\| |  | |  | |  | |__| |_| | |_| | . \\ | || |\\  | |_| |  / ___ \\| |  |_| '\nPRINT '    \\_/\\_/  |_| |_/_/   \\_\\_|   /_/   \\_\\_|  |_| |___| |_____\\___/ \\___/|_|\\_\\___|_| \\_|\\____| /_/   \\_\\_|  (_) '\n\n\nPRINT 'READ MORE AT: https://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/sql-data-warehouse-manage-monitor'\n                                                                                                                \n\nPRINT '-> QUERY STEPS/PLAN'\nPRINT '-> SESSION STEPS AND INFORMATION'\nPRINT '-> LOCK ESCALATION'\nIF @distributions = 1\n\tPRINT '-> QUERY STEPS ON ALL DISTRIBUTED DATABASES'\nIF @distributions = 1\n\tPRINT '-> DATA MOVEMENT STEPS ON EACH DISTRIBUTION'\nIF @tempdb = 1\n\tPRINT '-> TEMPDB INFO'\n\n\nSELECT\t*\nFROM\tsys.dm_pdw_request_steps \nWHERE\trequest_id = @request_id\nORDER BY step_index;\n\nSELECT\t\ts.session_id,\n\t\t\ts.request_id,\n\t\t\t--s.login_time,\n\t\t\ts.login_name,\n\t\t\ta.status,\n\t\t\tDATEDIFF(MINUTE,a.start_time,GETDATE()) AS running_time\t,\n\t\t\tDATEDIFF(MINUTE,a.submit_time,a.start_time) AS time_in_queue\t,\n\t\t\tDATEADD(HOUR,2,a.submit_time\t\t) AS submit_time\t\t,\n\t\t\tDATEADD(HOUR,2,a.start_time\t\t\t) AS start_time\t\t\t,\n\t\t\tDATEADD(HOUR,2,a.end_compile_time\t) AS end_compile_time\t,\n\t\t\tDATEADD(HOUR,2,a.end_time\t\t\t) AS end_time\t\t\t,\n\t\t\ta.[label],\n\t\t\ta.command,\n\t\t\t--l.blocking_session_id,\n\t\t\ts.app_name,\n\t\t\tA.resource_class,\n\t\t\tCONCAT('EXEC dbo.sp_whoisactive_deepdive @request_id = ''',s.request_id,''', @distributions = 0, @tempdb = 0') deepdive\nFROM\t\tsys.dm_pdw_exec_sessions s\nLEFT JOIN\tsys.dm_pdw_exec_requests a ON        s.session_id = a.session_id\nWHERE\t\ts.session_id = (SELECT TOP 1 session_id FROM sys.dm_pdw_exec_sessions WHERE request_id = @request_id)\n\nSELECT waits.session_id,\n      waits.request_id,  \n      requests.command,\n      requests.status,\n      requests.start_time,  \n      waits.type,\n      waits.state,\n      waits.object_type,\n      waits.object_name\nFROM   sys.dm_pdw_waits waits\n   JOIN  sys.dm_pdw_exec_requests requests\n   ON waits.request_id=requests.request_id\nWHERE waits.request_id = @request_id\nORDER BY waits.object_name, waits.object_type, waits.state;\n\nIF @distributions = 1\nBEGIN\n\tSELECT * FROM sys.dm_pdw_sql_requests\n\tWHERE request_id = @request_id AND step_index = 2;\n\n\tSELECT * FROM sys.dm_pdw_dms_workers\n\tWHERE request_id = @request_id AND step_index = 2;\nEND\n\nIF @tempdb = 1\nBEGIN\nSELECT\n    sr.request_id,\n    ssu.session_id,\n    ssu.pdw_node_id,\n    sr.command,\n    sr.total_elapsed_time,\n    es.login_name AS 'LoginName',\n    DB_NAME(ssu.database_id) AS 'DatabaseName',\n    (es.memory_usage * 8) AS 'MemoryUsage (in KB)',\n    (ssu.user_objects_alloc_page_count * 8) AS 'Space Allocated For User Objects (in KB)',\n    (ssu.user_objects_dealloc_page_count * 8) AS 'Space Deallocated For User Objects (in KB)',\n    (ssu.internal_objects_alloc_page_count * 8) AS 'Space Allocated For Internal Objects (in KB)',\n    (ssu.internal_objects_dealloc_page_count * 8) AS 'Space Deallocated For Internal Objects (in KB)',\n    CASE es.is_user_process\n    WHEN 1 THEN 'User Session'\n    WHEN 0 THEN 'System Session'\n    END AS 'SessionType',\n    es.row_count AS 'RowCount'\nFROM sys.dm_pdw_nodes_db_session_space_usage AS ssu\n    INNER JOIN sys.dm_pdw_nodes_exec_sessions AS es ON ssu.session_id = es.session_id AND ssu.pdw_node_id = es.pdw_node_id\n    INNER JOIN sys.dm_pdw_nodes_exec_connections AS er ON ssu.session_id = er.session_id AND ssu.pdw_node_id = er.pdw_node_id\n    INNER JOIN microsoft.vw_sql_requests AS sr ON ssu.session_id = sr.spid AND ssu.pdw_node_id = sr.pdw_node_id\nWHERE DB_NAME(ssu.database_id) = 'tempdb'\n    AND es.session_id <> @@SPID\n    AND es.login_name <> 'sa'\n\tAND\tsr.request_id = @request_id\nORDER BY sr.request_id;\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/x-Admin Table Distribution')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": "Select schema_name,\ntable_name,\ndistribution_policy_name,\ntable_row_count,\n[Max_distribution_row_count],\n[Min_distribution_row_count],\n[avg_distribution_row_count],\nCASE WHEN table_row_count = 0 then -1\nelse abs([Max_distribution_row_count] *1.0 - [Min_distribution_row_count]*1.0) / [Max_distribution_row_count] *100.0\nEND as [Table Skew Percent]FROM (\nSELECT\ns.name AS [schema_name]\n, t.name AS [table_name]\n, tp.[distribution_policy_desc] AS [distribution_policy_name], sum([row_count]) AS [table_row_count]\n, max(row_count) AS [Max_distribution_row_count]\n, min(row_count) AS [Min_distribution_row_count]\n, avg(row_count) AS [avg_distribution_row_count]\nfrom\nsys.schemas s\nINNER JOIN sys.tables t\nON s.[schema_id] = t.[schema_id]\nINNER JOIN sys.pdw_table_distribution_properties tp\nON t.[object_id] = tp.[object_id]\nINNER JOIN sys.pdw_table_mappings tm\nON t.[object_id] = tm.[object_id]\nINNER JOIN sys.pdw_nodes_tables nt\nON tm.[physical_name] = nt.[name]\nINNER JOIN sys.dm_pdw_nodes pn\nON nt.[pdw_node_id] = pn.[pdw_node_id]\nINNER JOIN sys.pdw_distributions di\nON nt.[distribution_id] = di.[distribution_id]\nINNER JOIN sys.dm_pdw_nodes_db_partition_stats nps\nON nt.[object_id] = nps.[object_id]\nAND nt.[pdw_node_id] = nps.[pdw_node_id]\nAND nt.[distribution_id] = nps.[distribution_id]\nwhere tp.[distribution_policy_desc] ='HASH'\nGROUP BY\ns.name\n, t.name\n, tp.[distribution_policy_desc]\n) A\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/x-Configure workload management classification')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": "-- Configure workload management classification\n-- To run loads with appropriate compute resources, create loading users designated for running loads. \n-- Assign each loading user to a specific resource class or workload group\n\n\n-- Create a workload group, BigDataLoad, that uses workload isolation by reserving:\n-- A minimum of 50% resources with a cap of 100%:\n\n IF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE group_name = 'BigDataLoad')\n BEGIN\n     CREATE WORKLOAD GROUP BigDataLoad WITH  \n     (\n         MIN_PERCENTAGE_RESOURCE = 50 -- integer value\n         ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 25 --  (guaranteed a minimum of 4 concurrency)\n         ,CAP_PERCENTAGE_RESOURCE = 100\n     );\n END\n\n-- Create a new workload classifier, HeavyLoader that assigns the [asa.sql.import01] user to the BigDataLoad workload group\n\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE [name] = 'HeavyLoader')\n BEGIN\n     CREATE WORKLOAD Classifier HeavyLoader WITH\n     (\n         Workload_Group ='BigDataLoad',\n         MemberName='asa.sql.import01',\n         IMPORTANCE = HIGH\n     );\n END\n\n\n--  We select from sys.workload_management_workload_classifiers to view all classifiers, including the one we just created\n SELECT * FROM sys.workload_management_workload_classifiers",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "franmerSQLPool",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/x-CreateLogin')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": "CREATE LOGIN [asa.sql.import01] WITH PASSWORD = '<PasswordHere>';\nGO\n\n\nCREATE USER [asa.sql.import01] FOR LOGIN [asa.sql.import01]\n\tWITH DEFAULT_SCHEMA = dbo\nGO\n\nGRANT CONNECT TO [asa.sql.import01]\n\n\nEXEC sp_addrolemember 'db_owner', 'asa.sql.import01';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/x-Explain with recommendations')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": " EXPLAIN WITH_RECOMMENDATIONS\n SELECT TOP 1000 * FROM\n (\nSELECT [Visitors_DE_City]\n,[Sessions_Device_Segment]\n,[Sessions_Model]\n,[Sessions_OS]\n,[Sessions_Browser_Type]\n,[Sessions_Traffic_Source]\n,SUM ([VisitCount]) As VisitCount\n FROM [dbo].[02_Franmer_Demo_Hash]\n GROUP BY [Visitors_DE_City]\n , [Sessions_Device_Segment]\n ,[Sessions_Model]\n , [Sessions_OS]\n , [Sessions_Browser_Type]\n , [Sessions_Traffic_Source]\n ) T\n\n\n SELECT  \n     *\n FROM    \n     sys.dm_pdw_exec_requests",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/x-List database roles members')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "The query returns the members of the database roles.",
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": "SELECT DP1.name AS DatabaseRoleName,   \n   isnull (DP2.name, 'No members') AS DatabaseUserName   \n FROM sys.database_role_members AS DRM  \n RIGHT OUTER JOIN sys.database_principals AS DP1  \n   ON DRM.role_principal_id = DP1.principal_id  \n LEFT OUTER JOIN sys.database_principals AS DP2  \n   ON DRM.member_principal_id = DP2.principal_id  \nWHERE DP1.type = 'R'\nORDER BY DP1.name;\n\nSELECT DP1.name AS DatabaseRoleName,   \n   isnull (DP2.name, 'No members') AS DatabaseUserName   \n FROM sys.database_role_members AS DRM  \n RIGHT OUTER JOIN sys.database_principals AS DP1  \n   ON DRM.role_principal_id = DP1.principal_id  \n LEFT OUTER JOIN sys.database_principals AS DP2  \n   ON DRM.member_principal_id = DP2.principal_id  \nWHERE DP2.name = 'IngestAccount'\nORDER BY DP1.name;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "franmerSQLPool",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/x-Resource classes')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": "-- View the resource classes\n\nSELECT name\nFROM   sys.database_principals\nWHERE  name LIKE '%rc%' AND type_desc = 'DATABASE_ROLE';\n\n\n-- Change a user's resource class\n-- To increase a user's resource class\nEXEC sp_addrolemember 'largerc', 'loaduser';\n\n\n-- To decrease the resource class\nEXEC sp_droprolemember 'largerc', 'loaduser';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "franmerSQLPool",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/x-Result Set Caching')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": "SELECT is_result_set_caching_on,*\nFROM   sys.databases\nWHERE  name = 'FranmerSQLPool'\n\n-- Turn on/off result-set caching for a database\n-- Must be run on the MASTER database\nALTER DATABASE {database_name}  \nSET RESULT_SET_CACHING ON -- { ON | OFF }\n\n\n-- Return all query requests with cache hits\n-- Run on target data warehouse\nSELECT *\nFROM   sys.dm_pdw_request_steps\nWHERE  command like '%DWResultCacheDb%' \n       AND step_index = 0",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/x-Select login and username')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Retrieve login and user name",
				"folder": {
					"name": "Admin"
				},
				"content": {
					"query": "select sp.name as login,\n       sp.type_desc as login_type,\n      \n       sp.create_date,\n       sp.modify_date,\n       case when sp.is_disabled = 1 then 'Disabled'\n            else 'Enabled' end as status\nfrom sys.server_principals sp\n\n\nselect name as username,\n       create_date,\n       modify_date,\n       type_desc as type,\n       authentication_type_desc as authentication_type\nfrom sys.database_principals\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "franmerSQLPool",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wikepedia')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Wikipedia"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "FranmerSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5eed10dc-e0d7-42c5-961e-1ccd3b6dd500/resourceGroups/AzureSynapseEastUs1/providers/Microsoft.Synapse/workspaces/franmersynapse2/bigDataPools/FranmerSpark",
						"name": "FranmerSpark",
						"type": "Spark",
						"endpoint": "https://franmersynapse2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/FranmerSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true,
							"tags": [
								"parameters"
							]
						},
						"source": [
							"yearWiki = \"2025\"\r\n",
							"monthWiki = \"05\"\r\n",
							"dayWiki = \"12\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"\r\n",
							"csvSchema = StructType([\r\n",
							"  StructField(\"project\", StringType(), True),\r\n",
							"  StructField(\"page\", StringType(), True),\r\n",
							"  StructField(\"requests\", IntegerType(), True),\r\n",
							"  StructField(\"size\", IntegerType(), True)\r\n",
							" ])\r\n",
							"\r\n",
							"WikipediaDF = spark.read.load('abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z1Wikipedia_datasets/pageviews-*.gz', format='csv', schema= csvSchema, delimiter= \" \" )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF.createOrReplaceTempView(\"pageviews\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered = spark.sql(\"SELECT page, project, SUM(requests) AS requests, {0} AS Year, {1} AS Month, {2} AS Day FROM pageviews GROUP BY page, project\".format(yearWiki, monthWiki, dayWiki))\r\n",
							"WikipediaDF_Filtered.show(10)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"try {\r\n",
							"mssparkutils.fs.rm(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp\", true)\r\n",
							"} catch {\r\n",
							"  case e:Exception=> println(\"No Folder\")\r\n",
							"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered.coalesce(1).write.parquet(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"files = mssparkutils.fs.ls(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")\r\n",
							"for x in files:\r\n",
							"    if x.name !=\"_SUCCESS\":\r\n",
							"        WikipediaFile = x.path"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikiepediaDestinationFile = \"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z3Wikipedia_results/{0}/{1}/{2}/Wikipedia_{0}_{1}_{2}.parquet\".format(yearWiki,monthWiki,dayWiki)\r\n",
							"mssparkutils.fs.cp(WikipediaFile,WikiepediaDestinationFile)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"WikipediaDF_Filtered.createOrReplaceTempView(\"pysparkdftemptable\")"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"import com.microsoft.spark.sqlanalytics.utils.Constants\r\n",
							"import org.apache.spark.sql.SqlAnalyticsConnector._\r\n",
							"\r\n",
							"val scala_df = spark.sqlContext.sql (\"select * from pysparkdftemptable\")\r\n",
							"//scala_df.write.option(Constants.SERVER, \"franmersqlforsynapse.database.windows.net\").franmerSQLSynapseDataMart\r\n",
							"scala_df.write.franmerSQLSynapseDataMart"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"scala_df.write.option(Constants.SERVER, \"franmersqlforsynapse.database.windows.net\").synapsesql(\"franmerSQLSynapseDataMart.dbo.Wikipedialogs\", Constants.EXTERNAL)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wikepedia_JDBC')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Wikipedia"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "FranmerSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5eed10dc-e0d7-42c5-961e-1ccd3b6dd500/resourceGroups/AzureSynapseEastUs1/providers/Microsoft.Synapse/workspaces/franmersynapse2/bigDataPools/FranmerSpark",
						"name": "FranmerSpark",
						"type": "Spark",
						"endpoint": "https://franmersynapse2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/FranmerSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true,
							"tags": [
								"parameters"
							]
						},
						"source": [
							"yearWiki = \"2021\"\r\n",
							"monthWiki = \"05\"\r\n",
							"dayWiki = \"04\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"\r\n",
							"csvSchema = StructType([ \r\n",
							"  StructField(\"project\", StringType(), True),\r\n",
							"  StructField(\"page\", StringType(), True),\r\n",
							"  StructField(\"requests\", IntegerType(), True),\r\n",
							"  StructField(\"size\", IntegerType(), True)\r\n",
							" ])\r\n",
							"\r\n",
							"WikipediaDF = spark.read.load('abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z1Wikipedia_datasets/pageviews-*.gz', format='csv', schema= csvSchema, delimiter= \" \" )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF.createOrReplaceTempView(\"pageviews\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered = spark.sql(\"SELECT page, project, SUM(requests) AS requests, {0} AS Year, {1} AS Month, {2} AS Day FROM pageviews WHERE project IN ('en', 'fr') AND page NOT IN ('Main_Page', '-','Special:Search','Sp?cial:Search','Wikipédia:Accueil_principal','Special:CreateAccount','Wikipedia:Contact_us','Spécial:Recherche','Special:ElectronPdf','Special:RecentChangesLinked','Wikipédia:Accueil_principal','Special:Watchlist','Special:Book','Special:RecentChanges','Special:WhatLinksHere','Special:MyContributions','Wikipedia:RA/AE','Special:Contributions','Special:UserLogout','Spécial:Liste_de_suivi','Spécial:Connexion','Spécial:ElectronPdf','Spécial:Créer_un_compte','Spécial:Pages_liées','Spécial:Journal','Spécial:Livre','Accueil','Spécial:Modifications_récentes','Spécial:Pages_liées/Aide:Discussion') GROUP BY page, project HAVING requests > 0 ORDER BY 3 DESC LIMIT 1000\".format(yearWiki, monthWiki, dayWiki))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"try {\r\n",
							"mssparkutils.fs.rm(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp\", true)\r\n",
							"} catch {\r\n",
							"  case e:Exception=> println(\"No Folder\")\r\n",
							"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered.coalesce(1).write.parquet(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"server_name = \"jdbc:sqlserver://franmersqlforsynapse.database.windows.net\"\r\n",
							"database_name = \"franmerSQLSynapseDataMart\"\r\n",
							"url = server_name + \";\" + \"databaseName=\" + database_name + \";\"\r\n",
							"\r\n",
							"table_name = \"Wikipedialogs\"\r\n",
							"username = \"franmer\"\r\n",
							"password = \"Code1Code1\" \r\n",
							"\r\n",
							"try:\r\n",
							"  WikipediaDF_Filtered.write \\\r\n",
							"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"    .mode(\"append\") \\\r\n",
							"    .option(\"url\", url) \\\r\n",
							"    .option(\"dbtable\", table_name) \\\r\n",
							"    .option(\"user\", username) \\\r\n",
							"    .option(\"password\", password) \\\r\n",
							"    .save()\r\n",
							"except ValueError as error :\r\n",
							"    print(\"Connector write failed\", error)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"files = mssparkutils.fs.ls(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")\r\n",
							"for x in files:\r\n",
							"    if x.name !=\"_SUCCESS\":\r\n",
							"        WikipediaFile = x.path"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikiepediaDestinationFile = \"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z3Wikipedia_results/{0}/{1}/{2}/Wikipedia_{0}_{1}_{2}.parquet\".format(yearWiki,monthWiki,dayWiki)\r\n",
							"mssparkutils.fs.cp(WikipediaFile,WikiepediaDestinationFile)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wikepedia_JDBC_Debug')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Wikipedia"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "FranmerSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5eed10dc-e0d7-42c5-961e-1ccd3b6dd500/resourceGroups/AzureSynapseEastUs1/providers/Microsoft.Synapse/workspaces/franmersynapse2/bigDataPools/FranmerSpark",
						"name": "FranmerSpark",
						"type": "Spark",
						"endpoint": "https://franmersynapse2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/FranmerSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")\r\n",
							"for x in files:\r\n",
							"    if x.name !=\"_SUCCESS\":\r\n",
							"        WikipediaFile = x.path"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wikepedia_JDBC_SPN')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Wikipedia"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "FranmerSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5eed10dc-e0d7-42c5-961e-1ccd3b6dd500/resourceGroups/AzureSynapseEastUs1/providers/Microsoft.Synapse/workspaces/franmersynapse2/bigDataPools/FranmerSpark",
						"name": "FranmerSpark",
						"type": "Spark",
						"endpoint": "https://franmersynapse2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/FranmerSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true,
							"tags": [
								"parameters"
							]
						},
						"source": [
							"yearWiki = \"2025\"\r\n",
							"monthWiki = \"05\"\r\n",
							"dayWiki = \"12\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"\r\n",
							"csvSchema = StructType([ \r\n",
							"  StructField(\"project\", StringType(), True),\r\n",
							"  StructField(\"page\", StringType(), True),\r\n",
							"  StructField(\"requests\", IntegerType(), True),\r\n",
							"  StructField(\"size\", IntegerType(), True)\r\n",
							" ])\r\n",
							"\r\n",
							"WikipediaDF = spark.read.load('abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z1Wikipedia_datasets/pageviews-*.gz', format='csv', schema= csvSchema, delimiter= \" \" )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF.createOrReplaceTempView(\"pageviews\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered = spark.sql(\"SELECT page, project, SUM(requests) AS requests, {0} AS Year, {1} AS Month, {2} AS Day FROM pageviews WHERE project IN ('en', 'fr') AND page NOT IN ('Main_Page', '-','Special:Search','Sp?cial:Search','Wikipédia:Accueil_principal','Special:CreateAccount','Wikipedia:Contact_us','Spécial:Recherche','Special:ElectronPdf','Special:RecentChangesLinked','Wikipédia:Accueil_principal','Special:Watchlist','Special:Book','Special:RecentChanges','Special:WhatLinksHere','Special:MyContributions','Wikipedia:RA/AE','Special:Contributions','Special:UserLogout','Spécial:Liste_de_suivi','Spécial:Connexion','Spécial:ElectronPdf','Spécial:Créer_un_compte','Spécial:Pages_liées','Spécial:Journal','Spécial:Livre','Accueil','Spécial:Modifications_récentes','Spécial:Pages_liées/Aide:Discussion') GROUP BY page, project HAVING requests > 0 ORDER BY 3 DESC LIMIT 1000\".format(yearWiki, monthWiki, dayWiki))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"try {\r\n",
							"mssparkutils.fs.rm(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp\", true)\r\n",
							"} catch {\r\n",
							"  case e:Exception=> println(\"No Folder\")\r\n",
							"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered.coalesce(1).write.parquet(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"files = mssparkutils.fs.ls(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")\r\n",
							"for x in files:\r\n",
							"    if x.name !=\"_SUCCESS\":\r\n",
							"        WikipediaFile = x.path"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikiepediaDestinationFile = \"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z3Wikipedia_results/{0}/{1}/{2}/Wikipedia_{0}_{1}_{2}.parquet\".format(yearWiki,monthWiki,dayWiki)\r\n",
							"mssparkutils.fs.cp(WikipediaFile,WikiepediaDestinationFile)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"context = adal.AuthenticationContext(authority)\r\n",
							"token = context.acquire_token_with_client_credentials(\"http://test.com\", \"249848a0-4030-48fb-bf24-47f6f17796a8\", \"30C-.40.-T6nZXHS9hE~h-9bIY6jc28bN9\")\r\n",
							"access_token = token[\"accessToken\"]\r\n",
							"\r\n",
							"server_name = \"jdbc:sqlserver://franmersqlforsynapse.database.windows.net\"\r\n",
							"database_name = \"franmerSQLSynapseDataMart\"\r\n",
							"url = server_name + \";\" + \"databaseName=\" + database_name + \";\"\r\n",
							"\r\n",
							"table_name = \"Wikipedialogs\"\r\n",
							"\r\n",
							"try:\r\n",
							"  WikipediaDF_Filtered.write \\\r\n",
							"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"    .mode(\"append\") \\\r\n",
							"    .option(\"url\", url) \\\r\n",
							"    .option(\"dbtable\", table_name) \\\r\n",
							"    .option(\"accessToken\", access_token) \\\r\n",
							"    .option(\"encrypt\", \"true\") \\\r\n",
							"    .option(\"hostNameInCertificate\", \"*.database.windows.net\") \\\r\n",
							"    .save()\r\n",
							"except ValueError as error :\r\n",
							"    print(\"Connector write failed\", error)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"server_name = \"jdbc:sqlserver://franmersqlforsynapse.database.windows.net\"\r\n",
							"database_name = \"franmerSQLSynapseDataMart\"\r\n",
							"url = server_name + \";\" + \"databaseName=\" + database_name + \";\"\r\n",
							"\r\n",
							"table_name = \"Wikipedialogs\"\r\n",
							"username = \"franmer\"\r\n",
							"password = \"Code1Code1\" \r\n",
							"\r\n",
							"try:\r\n",
							"  WikipediaDF_Filtered.write \\\r\n",
							"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"    .mode(\"append\") \\\r\n",
							"    .option(\"url\", url) \\\r\n",
							"    .option(\"dbtable\", table_name) \\\r\n",
							"    .option(\"user\", username) \\\r\n",
							"    .option(\"password\", password) \\\r\n",
							"    .save()\r\n",
							"except ValueError as error :\r\n",
							"    print(\"Connector write failed\", error)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered.createOrReplaceTempView(\"pysparkdftemptable\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"val jdbcHostname = \"franmersqlforsynapse.database.windows.net\"\r\n",
							"val jdbcPort = 1433\r\n",
							"val jdbcDatabase = \"franmerSQLSynapseDataMart\"\r\n",
							"\r\n",
							"// Create the JDBC URL without passing in the user and password parameters.\r\n",
							"val jdbcUrl = s\"jdbc:sqlserver://${jdbcHostname}:${jdbcPort};database=${jdbcDatabase}\"\r\n",
							"\r\n",
							"// Create a Properties() object to hold the parameters.\r\n",
							"import java.util.Properties\r\n",
							"val connectionProperties = new Properties()\r\n",
							"\r\n",
							"connectionProperties.put(\"user\", \"franmer\")\r\n",
							"connectionProperties.put(\"password\", \"Code1Code1\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"import org.apache.spark.sql.SaveMode\r\n",
							"var df1 = spark.sql(\"Select * FROM pysparkdftemptable\")\r\n",
							"df1.write.mode(SaveMode.Append).jdbc(jdbcUrl, \"Wikipedialogs\", connectionProperties)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wikepedia_JDBC_backup')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Wikipedia"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "FranmerSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/5eed10dc-e0d7-42c5-961e-1ccd3b6dd500/resourceGroups/AzureSynapseEastUs1/providers/Microsoft.Synapse/workspaces/franmersynapse2/bigDataPools/FranmerSpark",
						"name": "FranmerSpark",
						"type": "Spark",
						"endpoint": "https://franmersynapse2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/FranmerSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true,
							"tags": [
								"parameters"
							]
						},
						"source": [
							"yearWiki = \"2025\"\r\n",
							"monthWiki = \"05\"\r\n",
							"dayWiki = \"12\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.types import *\r\n",
							"\r\n",
							"csvSchema = StructType([ \r\n",
							"  StructField(\"project\", StringType(), True),\r\n",
							"  StructField(\"page\", StringType(), True),\r\n",
							"  StructField(\"requests\", IntegerType(), True),\r\n",
							"  StructField(\"size\", IntegerType(), True)\r\n",
							" ])\r\n",
							"\r\n",
							"WikipediaDF = spark.read.load('abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z1Wikipedia_datasets/pageviews-*.gz', format='csv', schema= csvSchema, delimiter= \" \" )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF.createOrReplaceTempView(\"pageviews\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered = spark.sql(\"SELECT page, project, SUM(requests) AS requests, {0} AS Year, {1} AS Month, {2} AS Day FROM pageviews WHERE project IN ('en', 'fr') AND page NOT IN ('Main_Page', '-','Special:Search','Sp?cial:Search','Wikipédia:Accueil_principal','Special:CreateAccount','Wikipedia:Contact_us','Spécial:Recherche','Special:ElectronPdf','Special:RecentChangesLinked','Wikipédia:Accueil_principal','Special:Watchlist','Special:Book','Special:RecentChanges','Special:WhatLinksHere','Special:MyContributions','Wikipedia:RA/AE','Special:Contributions','Special:UserLogout','Spécial:Liste_de_suivi','Spécial:Connexion','Spécial:ElectronPdf','Spécial:Créer_un_compte','Spécial:Pages_liées','Spécial:Journal','Spécial:Livre','Accueil','Spécial:Modifications_récentes','Spécial:Pages_liées/Aide:Discussion') GROUP BY page, project HAVING requests > 0 ORDER BY 3 DESC LIMIT 1000\".format(yearWiki, monthWiki, dayWiki))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"try {\r\n",
							"mssparkutils.fs.rm(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp\", true)\r\n",
							"} catch {\r\n",
							"  case e:Exception=> println(\"No Folder\")\r\n",
							"}"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered.coalesce(1).write.parquet(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"files = mssparkutils.fs.ls(\"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z2Wikipedia_temp/\")\r\n",
							"for x in files:\r\n",
							"    if x.name !=\"_SUCCESS\":\r\n",
							"        WikipediaFile = x.path"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikiepediaDestinationFile = \"abfss://wikipedia@thevaultgen2.dfs.core.windows.net/z3Wikipedia_results/{0}/{1}/{2}/Wikipedia_{0}_{1}_{2}.parquet\".format(yearWiki,monthWiki,dayWiki)\r\n",
							"mssparkutils.fs.cp(WikipediaFile,WikiepediaDestinationFile)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"context = adal.AuthenticationContext(authority)\r\n",
							"token = context.acquire_token_with_client_credentials(\"http://test.com\", \"249848a0-4030-48fb-bf24-47f6f17796a8\", \"30C-.40.-T6nZXHS9hE~h-9bIY6jc28bN9\")\r\n",
							"access_token = token[\"accessToken\"]\r\n",
							"\r\n",
							"server_name = \"jdbc:sqlserver://franmersqlforsynapse.database.windows.net\"\r\n",
							"database_name = \"franmerSQLSynapseDataMart\"\r\n",
							"url = server_name + \";\" + \"databaseName=\" + database_name + \";\"\r\n",
							"\r\n",
							"table_name = \"Wikipedialogs\"\r\n",
							"\r\n",
							"try:\r\n",
							"  WikipediaDF_Filtered.write \\\r\n",
							"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"    .mode(\"append\") \\\r\n",
							"    .option(\"url\", url) \\\r\n",
							"    .option(\"dbtable\", table_name) \\\r\n",
							"    .option(\"accessToken\", access_token) \\\r\n",
							"    .option(\"encrypt\", \"true\") \\\r\n",
							"    .option(\"hostNameInCertificate\", \"*.database.windows.net\") \\\r\n",
							"    .save()\r\n",
							"except ValueError as error :\r\n",
							"    print(\"Connector write failed\", error)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"server_name = \"jdbc:sqlserver://franmersqlforsynapse.database.windows.net\"\r\n",
							"database_name = \"franmerSQLSynapseDataMart\"\r\n",
							"url = server_name + \";\" + \"databaseName=\" + database_name + \";\"\r\n",
							"\r\n",
							"table_name = \"Wikipedialogs\"\r\n",
							"username = \"franmer\"\r\n",
							"password = \"Code1Code1\" \r\n",
							"\r\n",
							"try:\r\n",
							"  WikipediaDF_Filtered.write \\\r\n",
							"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
							"    .mode(\"append\") \\\r\n",
							"    .option(\"url\", url) \\\r\n",
							"    .option(\"dbtable\", table_name) \\\r\n",
							"    .option(\"user\", username) \\\r\n",
							"    .option(\"password\", password) \\\r\n",
							"    .save()\r\n",
							"except ValueError as error :\r\n",
							"    print(\"Connector write failed\", error)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"WikipediaDF_Filtered.createOrReplaceTempView(\"pysparkdftemptable\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"val jdbcHostname = \"franmersqlforsynapse.database.windows.net\"\r\n",
							"val jdbcPort = 1433\r\n",
							"val jdbcDatabase = \"franmerSQLSynapseDataMart\"\r\n",
							"\r\n",
							"// Create the JDBC URL without passing in the user and password parameters.\r\n",
							"val jdbcUrl = s\"jdbc:sqlserver://${jdbcHostname}:${jdbcPort};database=${jdbcDatabase}\"\r\n",
							"\r\n",
							"// Create a Properties() object to hold the parameters.\r\n",
							"import java.util.Properties\r\n",
							"val connectionProperties = new Properties()\r\n",
							"\r\n",
							"connectionProperties.put(\"user\", \"franmer\")\r\n",
							"connectionProperties.put(\"password\", \"Code1Code1\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"import org.apache.spark.sql.SaveMode\r\n",
							"var df1 = spark.sql(\"Select * FROM pysparkdftemptable\")\r\n",
							"df1.write.mode(SaveMode.Append).jdbc(jdbcUrl, \"Wikipedialogs\", connectionProperties)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FranmerSpark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/franmerSQLPool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}